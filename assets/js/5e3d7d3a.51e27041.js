"use strict";(self.webpackChunkoffloop_doc=self.webpackChunkoffloop_doc||[]).push([[8409],{2655:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"Core-Modules-and-Features/HTTPRequests","title":"HTTP Requests","description":"Overview","source":"@site/docs/Core-Modules-and-Features/HttpClient.md","sourceDirName":"Core-Modules-and-Features","slug":"/http-requests","permalink":"/offloop/docs/http-requests","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"HTTPRequests","title":"HTTP Requests","sidebar_label":"HTTP Requests","slug":"/http-requests","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Offline Manager","permalink":"/offloop/docs/offline-manager"},"next":{"title":"Storage","permalink":"/offloop/docs/storage"}}');var o=n(4848),s=n(8453);const a={id:"HTTPRequests",title:"HTTP Requests",sidebar_label:"HTTP Requests",slug:"/http-requests",sidebar_position:2},i=void 0,d={},l=[{value:"Overview",id:"overview",level:2},{value:"<code>HTTP Requests</code>",id:"http-requests",level:3},{value:"Example Usage",id:"example-usage",level:3},{value:"Fetch Data from a Network API",id:"fetch-data-from-a-network-api",level:4},{value:"Post Data to a Network API",id:"post-data-to-a-network-api",level:4},{value:"Delete Data from a Network API",id:"delete-data-from-a-network-api",level:4},{value:"Put Data to a Network API",id:"put-data-to-a-network-api",level:4}];function c(e){const t={code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"HTTP Requests"})," interface is used to manage network requests within the ",(0,o.jsx)(t.strong,{children:"Offloop Library"}),". It provides methods for sending and receiving data from APIs and other online services, while respecting offline conditions."]}),"\n",(0,o.jsx)(t.p,{children:"When the device is offline, the library automatically saves the requests to the required storage (indexDB by default) and retries them when the device is back online."}),"\n",(0,o.jsx)(t.h3,{id:"http-requests",children:(0,o.jsx)(t.code,{children:"HTTP Requests"})}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"HTTP Requests"})," interface provides methods for sending and receiving data from APIs and other online services. It includes the following methods:"]}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:(0,o.jsx)(t.code,{children:"postEntity"})}),": Sends a POST request to the specified entity with the provided data. If offline, the request is saved to indexDB and synced to the API call when online."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:(0,o.jsx)(t.code,{children:"getEntity"})}),": Sends a GET request to the specified entity. If offline, the request is saved to indexDB and retried when online."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:(0,o.jsx)(t.code,{children:"deleteEntity"})}),": Sends a DELETE request to the specified entity. If offline, the request is saved to indexDB and synced to the API call when online."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:(0,o.jsx)(t.code,{children:"putEntity"})}),": Sends a PUT request to the specified entity with the provided data. If offline, the request is saved to indexDB and synced to the API call when online."]}),"\n"]}),"\n",(0,o.jsx)(t.h3,{id:"example-usage",children:"Example Usage"}),"\n",(0,o.jsx)(t.h4,{id:"fetch-data-from-a-network-api",children:"Fetch Data from a Network API"}),"\n",(0,o.jsxs)(t.p,{children:["This example demonstrates how to fetch data from a network API using the ",(0,o.jsx)(t.code,{children:"getEntity"})," method."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"import { OfflineManager } from 'offloop';\r\n\r\nconst offlineManager = new OfflineManager({\r\n    apiBaseUrl: 'https://jsonplaceholder.typicode.com',\r\n    onlineChecker: {\r\n        check: async () => {\r\n          return true\r\n        },\r\n        timeout: 5000,\r\n    },\r\n});\r\n\r\n// Example function to fetch data from a network API\r\nawait offlineManager.getEntity('todos')\n"})}),"\n",(0,o.jsx)(t.h4,{id:"post-data-to-a-network-api",children:"Post Data to a Network API"}),"\n",(0,o.jsxs)(t.p,{children:["This example demonstrates how to post data to a network API using the ",(0,o.jsx)(t.code,{children:"postEntity"})," method."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"import { OfflineManager } from 'offloop';\r\n\r\nconst offlineManager = new OfflineManager({\r\n    apiBaseUrl: 'https://jsonplaceholder.typicode.com',\r\n    onlineChecker: {\r\n        check: async () => {\r\n          return true\r\n        },\r\n        timeout: 5000,\r\n    },\r\n});\r\n\r\n// Example function to post data to a network API\r\nawait offlineManager.postEntity('todos', {\r\n        title: 'Test Post',\r\n        body: 'This is a test post',\r\n});\n"})}),"\n",(0,o.jsx)(t.h4,{id:"delete-data-from-a-network-api",children:"Delete Data from a Network API"}),"\n",(0,o.jsxs)(t.p,{children:["This example demonstrates how to delete data from a network API using the ",(0,o.jsx)(t.code,{children:"deleteEntity"})," method."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"import { OfflineManager } from 'offloop';\r\n\r\nconst offlineManager = new OfflineManager({\r\n    apiBaseUrl: 'https://jsonplaceholder.typicode.com',\r\n    onlineChecker: {\r\n        check: async () => {\r\n          return true\r\n        },\r\n        timeout: 5000,\r\n    },\r\n});\r\n\r\n// Example function to delete data from a network API\r\nawait offlineManager.deleteEntity('todos', 1);\n"})}),"\n",(0,o.jsx)(t.h4,{id:"put-data-to-a-network-api",children:"Put Data to a Network API"}),"\n",(0,o.jsxs)(t.p,{children:["This example demonstrates how to put data to a network API using the ",(0,o.jsx)(t.code,{children:"putEntity"})," method."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"import { OfflineManager } from 'offloop';\r\n\r\nconst offlineManager = new OfflineManager({\r\n    apiBaseUrl: 'https://jsonplaceholder.typicode.com',\r\n    onlineChecker: {\r\n        check: async () => {\r\n          return true\r\n        },\r\n        timeout: 5000,\r\n    },\r\n});\r\n\r\n// Example function to put data to a network API\r\nawait offlineManager.putEntity('todos', 1, {\r\n        title: 'Test Put',\r\n        body: 'This is a test put',\r\n});\n"})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>i});var r=n(6540);const o={},s=r.createContext(o);function a(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);