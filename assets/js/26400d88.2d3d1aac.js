"use strict";(self.webpackChunkoffloop_doc=self.webpackChunkoffloop_doc||[]).push([[9691],{3590:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"API Reference/Custom Storage","title":"Custom storage","description":"Using a Custom Storage","source":"@site/docs/API Reference/CustomStorage.md","sourceDirName":"API Reference","slug":"/custom-storage","permalink":"/offloop/docs/custom-storage","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"Custom Storage","title":"Custom storage","sidebar_label":"Custom storage","slug":"/custom-storage","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Custom HTTP Client","permalink":"/offloop/docs/custom-http-client"},"next":{"title":"Offline Manager","permalink":"/offloop/docs/offline-manager"}}');var r=s(4848),o=s(8453);const i={id:"Custom Storage",title:"Custom storage",sidebar_label:"Custom storage",slug:"/custom-storage",sidebar_position:2},a=void 0,l={},d=[{value:"Using a Custom Storage",id:"using-a-custom-storage",level:2},{value:"Storage Interface",id:"storage-interface",level:3},{value:"Example Implementation",id:"example-implementation",level:3}];function c(e){const t={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"using-a-custom-storage",children:"Using a Custom Storage"}),"\n",(0,r.jsxs)(t.p,{children:["To use a custom Storage, you need to implement the ",(0,r.jsx)(t.code,{children:"Storage"})," interface. Below is an example of how to create a custom storage class and use it with the ",(0,r.jsx)(t.code,{children:"OfflineProvider"}),"."]}),"\n",(0,r.jsx)(t.h3,{id:"storage-interface",children:"Storage Interface"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"Storage"})," interface defines the methods that need to be implemented to create a custom storage. Here are the key methods:"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"init(): Promise<void>"}),": Initializes the storage."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"save(storeName: string, data: unknown)"}),": Saves data to the specified store."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"get<T>(storeName: string, id: string): Promise<T | null>"}),": Retrieves data by ID from the specified store."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"delete(storeName: string, id: string): Promise<void>"}),": Deletes data by ID from the specified store."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"getAll<T>(storeName: string): Promise<T[]>"}),": Retrieves all data from the specified store."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"update(storeName: string, data: unknown): Promise<void>"}),": Updates data in the specified store."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"getByContentHash?(storeName: string, contentHash: string): Promise<unknown | null>"}),": Retrieves data by content hash from the specified store."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"deleteAll?(storeName: string): Promise<void>"}),": Deletes all data from the specified store."]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"example-implementation",children:"Example Implementation"}),"\n",(0,r.jsxs)(t.p,{children:["Below is an example implementation of a custom storage class ",(0,r.jsx)(t.code,{children:"ArrayStorage"})," and how to use it with the ",(0,r.jsx)(t.code,{children:"OfflineProvider"}),"."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:'\r\nclass ArrayStorage implements Storage {\r\n\tprivate data = [];\r\n\tinit(): Promise<void>;\r\n  save(storeName: string, data: unknown) {\r\n\t\t//\r\n  }\r\n  get<T>(storeName: string, id: string): Promise<T | null>;\r\n  delete(storeName: string, id: string): Promise<void>;\r\n  getAll<T>(storeName: string): Promise<T[]>;\r\n  update(storeName: string, data: unknown): Promise<void>;\r\n  getByContentHash?(\r\n    storeName: string,\r\n    contentHash: string\r\n  ): Promise<unknown | null>;\r\n  deleteAll?(storeName: string): Promise<void>;\r\n}\r\n\r\nconst instance = new OfflineProvider({ \r\n\tbaseUrl: "http://locahost:3000/api"\r\n\tstorage: new ArrayStorage(),\r\n});\r\n\r\ninstance.saveEntity("/users", { username: "Ejaz"}); // post api <> indexDB\n'})})]})}function m(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>i,x:()=>a});var n=s(6540);const r={},o=n.createContext(r);function i(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);