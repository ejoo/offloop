"use strict";(self.webpackChunkoffloop_doc=self.webpackChunkoffloop_doc||[]).push([[2423],{3913:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>f,frontMatter:()=>a,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"Core-Modules-and-Features/OfflineManager","title":"Offline Manager","description":"Overview","source":"@site/docs/Core-Modules-and-Features/OfflineManager.md","sourceDirName":"Core-Modules-and-Features","slug":"/offline-manager","permalink":"/offloop/docs/offline-manager","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"OfflineManager","title":"Offline Manager","sidebar_label":"Offline Manager","slug":"/offline-manager","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Custom storage","permalink":"/offloop/docs/custom-storage"},"next":{"title":"HTTP Requests","permalink":"/offloop/docs/http-requests"}}');var s=r(4848),t=r(8453);const a={id:"OfflineManager",title:"Offline Manager",sidebar_label:"Offline Manager",slug:"/offline-manager",sidebar_position:1},i=void 0,l={},c=[{value:"Overview",id:"overview",level:2},{value:"<code>OfflineManagerConfig</code>",id:"offlinemanagerconfig",level:3},{value:"Usage and Examples",id:"usage-and-examples",level:2},{value:"Methods and Features",id:"methods-and-features",level:3},{value:"Example Usage",id:"example-usage",level:3}];function d(e){const n={code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"OfflineManager"})," class is the core component of the ",(0,s.jsx)(n.strong,{children:"Offloop Library"})," for managing offline data access and synchronization in your React and React Native apps. By default, it uses ",(0,s.jsx)(n.strong,{children:"IndexedDB"})," for offline storage, but it can fall back to ",(0,s.jsx)(n.strong,{children:"LocalStorage"})," for smaller data storage needs."]}),"\n",(0,s.jsx)(n.h3,{id:"offlinemanagerconfig",children:(0,s.jsx)(n.code,{children:"OfflineManagerConfig"})}),"\n",(0,s.jsxs)(n.p,{children:["Configuration options for the ",(0,s.jsx)(n.code,{children:"OfflineManager"}),"."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"apiBaseUrl"}),": ",(0,s.jsx)(n.code,{children:"string"})," - The base URL for the API."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"dbName"}),": ",(0,s.jsx)(n.code,{children:"string"})," (optional) - The name of the database to use for offline storage."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"syncInterval"}),": ",(0,s.jsx)(n.code,{children:"number"})," (optional) - The interval in milliseconds for synchronizing data when online."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"maxRetries"}),": ",(0,s.jsx)(n.code,{children:"number"})," (optional) - The maximum number of retry attempts for failed requests."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"httpClient"}),": ",(0,s.jsx)(n.code,{children:"HttpClient"})," (optional) - Custom HTTP client for making network requests."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"storage"}),": ",(0,s.jsx)(n.code,{children:"Storage"})," (optional) - Custom storage mechanism for offline data."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"onlineChecker"}),": ",(0,s.jsx)(n.code,{children:"OnlineCheckerConfig"})," (optional) - Configuration for checking online status."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"networkMonitor"}),": ",(0,s.jsx)(n.code,{children:"NetworkMonitor"})," (optional) - Custom network monitor for detecting network changes."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"queueManager"}),": ",(0,s.jsx)(n.code,{children:"QueueManager"})," (optional) - Custom queue manager for handling request queues."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"usage-and-examples",children:"Usage and Examples"}),"\n",(0,s.jsx)(n.h3,{id:"methods-and-features",children:"Methods and Features"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Automatic Offline Management"}),": Handles the synchronization of network requests when the device goes online and manages data locally while offline."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Customizable"}),": Allows for configuration of offline storage, request synchronization, and more via the ",(0,s.jsx)(n.code,{children:"OfflineManagerConfig"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"example-usage",children:"Example Usage"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { OfflineManager } from 'offloop';\r\n\r\n// Instantiate OfflineManager with custom configuration\r\nconst offlineManager = new OfflineManager({\r\n    apiBaseUrl: 'https://jsonplaceholder.typicode.com',\r\n    onlineChecker: {\r\n        check: async () => {\r\n          return true\r\n        },\r\n        timeout: 5000,\r\n    }, // Sync every 5 seconds when online\r\n});\r\n\r\n// Example function to fetch data from a network API\r\nasync getRequest() {\r\n    try {\r\n      const response = await this.offlineManager.getEntity('todos');\r\n      console.log({response})\r\n    } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n    }\r\n  }\r\n\r\n// Example function to post data to a network API\r\nasync postRequest(data) {\r\n    try {\r\n      const response = await this.offlineManager.postEntity('todos', data);\r\n      console.log({response})\r\n    } catch (error) {\r\n        console.error('Error posting data:', error);\r\n    }\r\n  }\n"})}),"\n",(0,s.jsx)(n.hr,{})]})}function f(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>i});var o=r(6540);const s={},t=o.createContext(s);function a(e){const n=o.useContext(t);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),o.createElement(t.Provider,{value:n},e.children)}}}]);